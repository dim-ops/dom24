# namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-test1
---
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-test2
---
# ConfigMap pour nginx-test1
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx-test1
data:
  nginx.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;

        location /app1 {
            rewrite ^/app1(.*)$ $1 break;
            try_files $uri $uri/ /index.html;
        }
    }
---
# ConfigMap pour nginx-test2
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx-test2
data:
  nginx.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;

        location /app2 {
            rewrite ^/app2(.*)$ $1 break;
            try_files $uri $uri/ /index.html;
        }
    }
---
# Deployment pour nginx-test1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx-test1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
# Service pour nginx-test1
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx-test1
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
  selector:
    app: nginx
---
# Deployment pour nginx-test2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx-test2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
# Service pour nginx-test2
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx-test2
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
  selector:
    app: nginx
---
# Ingress pour nginx-test1
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: nginx-test1
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/group.name: shared-alb
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
    # alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    #alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-south-2:000000000000:certificate/default-certificate
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /app1
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
---
# Ingress pour nginx-test2
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: nginx-test2
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/group.name: shared-alb
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
    # alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    #alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-south-2:000000000000:certificate/default-certificate
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /app2
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
